Laboration 2 del 2. (frivilligt)

Läs labkriterierna längst ner på sidan innan ni fortsätter!

I denna laborationsuppgift är tanken att ni ska fortsätta på den lösning ni gjort i lab 2 del 1. Vi ska fortsätta med design patterns och GUI.

Se till att noga läsa igenom instruktionerna och att ni följer de regler och krav som labdokumentet föreskriver. Börja med att kolla igenom hela labdokumentet och se vad som krävs för att få godkänt samt att ni laddar ner de filer som krävs.

Börja med att kolla på repot <insert repo here> där ska ni hitta detta lab pm samt nya filer. Notera att ni kommer behöva eran färdiga lösning från Lab 2 del 1.

Förberedande uppgifter:
=======================
Uppgift 0)
Använd git till denna lab, antingen via terminalen eller IntelliJ. Ni bör vid det här laget kunna hantera commits, push och pull.
Ni ska kunna uppvisa en fullständig commit-historik.
Tips: Gör minst en commit per deluppgift.

Uppgift 1)
Se till att ni har bilar som åker och svarar på alla era input från GUI:t.

Programmerings-uppgifter:
=========================
Uppgift a)
Implementera Factory Pattern. Ni har friheten att utöka eller modifiera modellen så mycket som behövs men ni behöver en CarFactory klass. Tips: http://www.tutorialspoint.com/design_pattern/factory_pattern.htm

Uppgift b)
Nu vill vi kunna lägga till och ta bort bilar i GUI:t. För att göra det behövs både nya knappar och ny kod i controllern.
Skapa en "Add car" och en "Remove car" knapp som har följande funktionalitet:
1. "Add car" ska antingen generera en random bil eller en given bil.
2. "Remove car" ska antingen plocka bort en random bil eller radera den sista som las till.
3. Om inga bilar finns ska "Remove car" inte ha någon effekt, och om det finns 10 bilar ska "Add car" inte ha någon effekt.

Uppgift c)
Implementera State Pattern för Scania-lastbilen. I nuläget kan den anta "inconsistent state" om värdet för bedIsDown inte
stämmer överens med värdet för bedAngle.
1. Definiera de tre olika states som lastbilen kan anta.
2. Lägg rätt beteende för metoderna i respektive klass.
3. Byt så att Scania-klassen använder dessa states istället för nuvarande dåliga variant.


Uppgift d)
Utöka era bilar med en bilmodell till, SuperCar klassen i SuperCar.java . Följande funktioner ska finnas med:
1. Bilen ska ha enginePower 500, valfria värden på nrOfDoors etc...
2. Den ska stödja alla de andra "specialfunktioner" som Volvo, Saab och Scania har som t.ex. Turbo, Liftbed etc.





BONUS-uppgift f)
- Gör så att man kan välja vilken bil man vill ta bort genom att markera bilarna, så att de blir "highlightade".
- Gör ett spel utav eran simulator, komplett med poäng och 2-player funktionalitet.

--------------------------------------------------------------------------------
Inlämning (filer):
CarFactory.java
SuperCar.java

Krav för godkänt på inlämning:
Inga rader med fler än 80 tecken.
Eran lösning ska endast innehålla ovannämnda filer i sektionen "Inlämning".
Alla gruppmedlemmar skall ha skrivit på koden och känna till hela arbetet individuellt
Alla uppgifter ska vara lösta vid redovisningen.
Lösning skall gå att kompilera!


Labbkriterier:
Det är absolut förbjudet att dela, kopiera eller använda kod från varandra på något sätt. 
Att diskutera lösningar är inte heller tillåtet, prata med labbhandledarna eller kursansvarig ifall ni behöver hjälp.
För att få godkänt i labbarna gör ni muntliga redovisningar. Gruppen gör detta samtidigt men ni testas individuellt, dvs. båda (eller alla tre) i gruppen kommer ställas frågor var och en för sig. Detta för att undvika grupper där en medlem inte arbetar eller hamnar efter. Så se till att ni hänger med i laborationen, fråga om hjälp ifall ni fastnar.

OBS: Notera att redovisning av denna del är frivillig 2016.